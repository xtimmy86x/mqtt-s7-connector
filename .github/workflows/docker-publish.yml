name: Publish Docker image (manual)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag dell'immagine (es: v1.2.3, 1.2.3, o custom)"
        required: true
        default: "v1.0.0"
      latest:
        description: "Aggiungi anche il tag 'latest'?"
        type: boolean
        required: true
        default: false
      platforms:
        description: "Piattaforme (separate da virgola)"
        required: true
        default: "linux/amd64,linux/arm64"
      push:
        description: "Eseguo il push su GHCR? (false = build di prova)"
        type: boolean
        required: true
        default: true
      context:
        description: "Build context"
        required: true
        default: "."
      dockerfile:
        description: "Path del Dockerfile"
        required: true
        default: "./Dockerfile"

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write     # necessario per pubblicare su ghcr.io
      contents: read
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}   # es: owner/repo

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: vars
        run: |
          PRIMARY_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag }}"
          TAGS="$PRIMARY_TAG"
          if [ "${{ inputs.latest }}" = "true" ]; then
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          fi
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "primary_tag=$PRIMARY_TAG" >> $GITHUB_OUTPUT

      - name: Build & (optionally) Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          tags: ${{ steps.vars.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show resulting tags
        run: |
          echo "Immagini generate:"
          echo "${{ steps.vars.outputs.tags }}" | tr ',' '\n'
